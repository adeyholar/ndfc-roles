# ndfc_vpc_create_rest/tasks/main.yml

# - Retrieve serialNumber and isVpcConfigured for both target vpc peers
# - if, for both peers, serialNumber != '' and isVpcConfigured == 'false'
#     create the peers
# - else
#     skip

# set_fact for p1_serial, p1_vpc, p1_db_id
- name: main query FABRIC {{ fabric_name }} VPC {{ vpc_name }} vpc_peer_1 {{ ip }}
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_name }}"
    state: query
    config:
    - seed_ip: "{{ ip }}"
  register: mr1
  vars:
    mq1: "[?fabric == '{{ fabric_name }}'] | [?vpc_name == '{{ vpc_name }}'].peer_1_ip | [0]"
    ip: "{{ vpc_peers | json_query(mq1)}}"
- name: main set_fact p1_serial, p1_vpc, p1_db_id
  set_fact:
    p1_serial: "{{ mr1.response | json_query(mq2) }}"
    p1_vpc: "{{ mr1.response | json_query(mq3) }}"
    p1_db_id: "{{ mr1.response | json_query(mq4) }}"
  vars:
    mq2: "[0].serialNumber"
    mq3: "[0].isVpcConfigured"
    mq4: "[0].switchDbID"

# set_fact for p2_serial, p2_vpc, p2_db_id
- name: main query FABRIC {{ fabric_name }} VPC {{ vpc_name }} vpc_peer_2
  cisco.dcnm.dcnm_inventory:
    fabric: "{{ fabric_name }}"
    state: query
    config:
    - seed_ip: "{{ ip }}"
  register: mr2
  vars:
    mq5: "[?fabric == '{{ fabric_name }}'] | [?vpc_name == '{{ vpc_name }}'].peer_2_ip | [0]"
    ip: "{{ vpc_peers | json_query(mq5)}}"
- name: main set_fact p2_serial, p2_vpc, p2_db_id
  set_fact:
    p2_serial: "{{ mr2.response | json_query(mq6) }}"
    p2_vpc: "{{ mr2.response | json_query(mq7) }}"
    p2_db_id: "{{ mr2.response | json_query(mq8) }}"
  vars:
    mq6: "[0].serialNumber"
    mq7: "[0].isVpcConfigured"
    mq8: "[0].switchDbID"

# Conditionally create vpc peering
- name: main REST create VPC Peers fabric_name {{ fabric_name }} vpc_name {{ vpc_name }} configured {{ p1_vpc }}/{{ p2_vpc }} serial_number {{ p1_serial }}/{{ p2_serial }}"
  cisco.dcnm.dcnm_rest:
    method: POST
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/vpcpair"
    json_data: "{{ vars_dict | to_json }}"
  vars:
    vars_dict:
      peerOneId: "{{ p1_serial }}"
      peerTwoId: "{{ p2_serial }}"
      useVirtualPeerlink: "true"
  when: p1_serial != '' and p2_serial != '' and p1_vpc == False and p2_vpc == False
