# ndfc_rest_fabric_msd_remove_child/tasks/main.yml
---
# query active fabrics
- name: main REST GET fabrics
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics"
  register: mr1
- name: main set_fact active_fabrics
  set_fact:
     active_fabrics: "{{ mr1.response.DATA | json_query(mq1) | to_json }}"
  vars:
    mq1: "[*].{FabricName: fabricName}"

# query fabric-associations for child_fabric's fabric_parent
- name: main REST GET fabric_associations
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/msd/fabric-associations/"
  register: mr2
- name: main set_fact fabric_parent
  set_fact:
     fabric_parent: "{{ mr2.response.DATA | json_query(mq2) }}"
  vars:
    mq2: "[?fabricName == '{{ child_fabric }}'].{fabricParent: fabricParent}"

# Remove child_fabric to msd_fabric if child_fabric's fabric_parent != None and both msd_fabric and child_fabric exists
- name: main REST POST msdExit msd_fabric {{ msd_fabric }} child_fabric {{ child_fabric }} fabric_parent ({{ fabric_parent[0].fabricParent }})
  cisco.dcnm.dcnm_rest:
    method: POST
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/msdExit"
    json_data: "{{ vars_dict | to_json }}"
  when: "msd_fabric in active_fabrics and child_fabric in active_fabrics and fabric_parent[0].fabricParent != 'None'"
  vars:
    vars_dict:
      destFabric: "{{ msd_fabric }}"
      sourceFabric: "{{ child_fabric }}"
